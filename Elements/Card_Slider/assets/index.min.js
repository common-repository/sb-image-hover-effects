var sa = {
    isAdminBar: function() {
        return $('body').is('.admin-bar');
    },

    init: function() {



        var globals = {
            'sticky': sa.Sticky,
            'parallax': sa.ParallaxElement,
            'global-tooltip': sa.GlobalTooltip,
        };

        var sections = {
            'parallax-background': sa.ParallaxBackground,
        };
        $.each(globals, function(extension, callback) {
            elementorFrontend.hooks.addAction('frontend/element_ready/global', callback);
        });

        $.each(sections, function(extension, callback) {
            elementorFrontend.hooks.addAction('frontend/element_ready/section', callback);
        });
    },

    getRefreshableWidgets: function() {
        if (!sa_el_addons_loader)
            return false;

        return sa_el_addons_loader.refreshableWidgets;
    },
    getGlobalSettings: function(section) {

        if (section in elementorFrontendConfig.settings) {
            return elementorFrontendConfig.settings[section];
        }

        return false;
    },

    getItems: function(items, itemKey) {
        if (itemKey) {
            var keyStack = itemKey.split('.'),
                currentKey = keyStack.splice(0, 1);

            if (!keyStack.length) {
                return items[currentKey];
            }

            if (!items[currentKey]) {
                return;
            }

            return this.getItems(items[currentKey], keyStack.join('.'));
        }

        return items;
    },

    getElementSettings: function($element, setting) {

        var elementSettings = {},
            modelCID = $element.data('model-cid');

        if (elementorFrontend.isEditMode() && modelCID) {
            var settings = elementorFrontend.config.elements.data[modelCID],
                type = settings.attributes.widgetType || settings.attributes.elType,
                settingsKeys = elementorFrontend.config.elements.keys[type];

            if (!settingsKeys) {
                settingsKeys = elementorFrontend.config.elements.keys[type] = [];

                jQuery.each(settings.controls, function(name, control) {
                    if (control.frontend_available) {
                        settingsKeys.push(name);
                    }
                });
            }

            jQuery.each(settings.getActiveControls(), function(controlKey) {
                if (-1 !== settingsKeys.indexOf(controlKey)) {
                    elementSettings[controlKey] = settings.attributes[controlKey];
                }
            });
        } else {
            elementSettings = $element.data('settings') || {};
        }

        return sa.getItems(elementSettings, setting);
    },

    getElementType: function($element) {
        if ('section' === $element.data('element_type') || 'column' === $element.data('element_type')) {
            return $element.data('element_type');
        }

        return 'widget';
    },

    getElementSkin: function($element) {
        return $element.attr('data-widget_type').split('.')[1];
    },

    getUniqueScopeId: function($scope) {
        var scopeId = $scope.data('id'),
            $clones = $('[data-id="' + scopeId + '"]');

        if (!sa.hasMultipleScopeId(scopeId)) {
            return scopeId;
        }

        $clones.each(function(index) {
            $(this).attr('data-offcanvas-index', index);
        });

        scopeId = scopeId + '_' + $scope.data('offcanvas-index');

        return scopeId;
    },

    refreshWidgets: function($container, refreshable) {
        $container.each(function() {
            $(this).find('.elementor-widget').each(function() {
                sa.refreshWidget($(this), refreshable);
            });
        });
    },

    refreshWidget: function($widget, refreshable) {
        var widgetType = $widget.data('widget_type');

        if (refreshable) {
            $.each(sa.getRefreshableWidgets(), function(index, widget) {
                if (widget === widgetType) {
                    elementorFrontend.elementsHandler.runReadyTrigger($widget);
                }
            });
        } else {
            elementorFrontend.elementsHandler.runReadyTrigger($widget);
        }
    },

    hasMultipleScopeId: function(scopeId) {
        var $clones = $('[data-id="' + scopeId + '"]');

        if (1 === $clones.length) {
            return false;
        }

        return true;
    },

    getWindow: function() {
        return elementorFrontend.isEditMode() ? window.elementor.$previewContents : $(window);
    },

    onElementRemove: function($element, callback) {
        if (elementorFrontend.isEditMode()) {
            elementor.channels.data.on('element:before:remove', function(model) {
                if ($element.data('id') === model.id) {
                    callback();
                }
            });
        }
    }
};


var SaElCardSlider = function($scope, $) {
    var $carousel = $scope.find('.sa-el-card-slider').eq(0),
        elementSettings = sa.getElementSettings($scope);
    var $speed = ($carousel.data("speed") !== undefined) ? $carousel.data("speed") : 400,
        $autoplay = (elementSettings.autoplay === 'yes') ? true : false,
        $autoplay_delay = ($autoplay == true) ? elementSettings.autoplay_speed : 999999,
        $pagination = (elementSettings.pagination === 'yes') ? '.swiper-pagination' : '',
        $arrows = ($carousel.data("arrows") !== undefined) ? $carousel.data("arrows") : false,
        $arrow_next = ($carousel.data("arrow-next") !== undefined) ? $carousel.data("arrow-next") : '.swiper-button-next',
        $arrow_prev = ($carousel.data("arrow-prev") !== undefined) ? $carousel.data("arrow-prev") : '.swiper-button-prev',

        mySwiper = new Swiper($carousel, {
            direction: 'horizontal',
            speed: $speed,
            effect: 'fade',
            fadeEffect: {
                crossFade: true
            },
            slidesPerView: 1,
            grabCursor: 'yes' === elementSettings.grab_cursor,
            paginationClickable: true,
            autoHeight: false,
            loop: 'yes' === elementSettings.loop,
            autoplay: {
                delay: $autoplay_delay,
            },
            pagination: {
                el: $pagination,
                type: elementSettings.pagination_type,
                clickable: true,
            },
            navigation: {
                nextEl: $arrow_next,
                prevEl: $arrow_prev,
            },
        });
};

jQuery(window).on("elementor/frontend/init", function() {
    elementorFrontend.hooks.addAction(
        "frontend/element_ready/sa_el_card_slider.default",
        SaElCardSlider
    );
});