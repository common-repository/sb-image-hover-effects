
var sa = {
    isAdminBar: function () {
        return $('body').is('.admin-bar');
    },

    init: function () {
        var globals = {
            'sticky': sa.Sticky,
            'parallax': sa.ParallaxElement,
            'global-tooltip': sa.GlobalTooltip,
        };

        var sections = {
            'parallax-background': sa.ParallaxBackground,
        };
        $.each(globals, function (extension, callback) {
            elementorFrontend.hooks.addAction('frontend/element_ready/global', callback);
        });

        $.each(sections, function (extension, callback) {
            elementorFrontend.hooks.addAction('frontend/element_ready/section', callback);
        });
    },

    getRefreshableWidgets: function () {
        if (!sa_el_addons_loader)
            return false;

        return sa_el_addons_loader.refreshableWidgets;
    },
    getGlobalSettings: function (section) {

        if (section in elementorFrontendConfig.settings) {
            return elementorFrontendConfig.settings[section];
        }

        return false;
    },

    getItems: function (items, itemKey) {
        if (itemKey) {
            var keyStack = itemKey.split('.'),
                    currentKey = keyStack.splice(0, 1);

            if (!keyStack.length) {
                return items[ currentKey ];
            }

            if (!items[ currentKey ]) {
                return;
            }

            return this.getItems(items[ currentKey ], keyStack.join('.'));
        }

        return items;
    },

    getElementSettings: function ($element, setting) {

        var elementSettings = {},
                modelCID = $element.data('model-cid');

        if (elementorFrontend.isEditMode() && modelCID) {
            var settings = elementorFrontend.config.elements.data[ modelCID ],
                    type = settings.attributes.widgetType || settings.attributes.elType,
                    settingsKeys = elementorFrontend.config.elements.keys[ type ];

            if (!settingsKeys) {
                settingsKeys = elementorFrontend.config.elements.keys[type] = [];

                jQuery.each(settings.controls, function (name, control) {
                    if (control.frontend_available) {
                        settingsKeys.push(name);
                    }
                });
            }

            jQuery.each(settings.getActiveControls(), function (controlKey) {
                if (-1 !== settingsKeys.indexOf(controlKey)) {
                    elementSettings[ controlKey ] = settings.attributes[ controlKey ];
                }
            });
        } else {
            elementSettings = $element.data('settings') || {};
        }

        return sa.getItems(elementSettings, setting);
    },

    getElementType: function ($element) {
        if ('section' === $element.data('element_type') || 'column' === $element.data('element_type')) {
            return $element.data('element_type');
        }

        return 'widget';
    },

    getElementSkin: function ($element) {
        return $element.attr('data-widget_type').split('.')[1];
    },

    getUniqueScopeId: function ($scope) {
        var scopeId = $scope.data('id'),
                $clones = $('[data-id="' + scopeId + '"]');

        if (!sa.hasMultipleScopeId(scopeId)) {
            return scopeId;
        }

        $clones.each(function (index) {
            $(this).attr('data-offcanvas-index', index);
        });

        scopeId = scopeId + '_' + $scope.data('offcanvas-index');

        return scopeId;
    },

    refreshWidgets: function ($container, refreshable) {
        $container.each(function () {
            $(this).find('.elementor-widget').each(function () {
                sa.refreshWidget($(this), refreshable);
            });
        });
    },

    refreshWidget: function ($widget, refreshable) {
        var widgetType = $widget.data('widget_type');

        if (refreshable) {
            $.each(sa.getRefreshableWidgets(), function (index, widget) {
                if (widget === widgetType) {
                    elementorFrontend.elementsHandler.runReadyTrigger($widget);
                }
            });
        } else {
            elementorFrontend.elementsHandler.runReadyTrigger($widget);
        }
    },

    hasMultipleScopeId: function (scopeId) {
        var $clones = $('[data-id="' + scopeId + '"]');

        if (1 === $clones.length) {
            return false;
        }

        return true;
    },

    getWindow: function () {
        return elementorFrontend.isEditMode() ? window.elementor.$previewContents : $(window);
    },

    onElementRemove: function ($element, callback) {
        if (elementorFrontend.isEditMode()) {
            elementor.channels.data.on('element:before:remove', function (model) {
                if ($element.data('id') === model.id) {
                    callback();
                }
            });
        }
    }
};
var SaElGallerySlider = function ($scope, $) {
    $scope.elementSettings = sa.getElementSettings($scope);
    var $carousel = $scope.find('.sa-el-gallery-slider__carousel'),
            $preview = $scope.find('.sa-el-gallery-slider__preview'),
            $thumbs = $scope.find('.sa-el-gallery .sa-el-gallery__item'),
            start = elementorFrontend.config.is_rtl ? 'right' : 'left',
            end = elementorFrontend.config.is_rtl ? 'left' : 'right',
            slickArgs = {
                slidesToShow: 1,
                slidesToScroll: 1,
                adaptiveHeight: 'yes' === $scope.elementSettings.adaptive_height,
                autoplay: 'yes' === $scope.elementSettings.autoplay,
                autoplaySpeed: $scope.elementSettings.autoplay_speed,
                infinite: 'yes' === $scope.elementSettings.infinite,
                pauseOnHover: 'yes' === $scope.elementSettings.pause_on_hover,
                speed: $scope.elementSettings.speed,
                arrows: 'yes' === $scope.elementSettings.show_arrows,
                prevArrow: '<div class="sa-el-carousel__arrow sa-el-arrow sa-el-arrow--prev"><i class="eicon-chevron-' + start + '"></i></div>',
                nextArrow: '<div class="sa-el-carousel__arrow sa-el-arrow sa-el-arrow--next"><i class="eicon-chevron-' + end + '"></i></div>',
                dots: false,
                rtl: 'rtl' === $scope.elementSettings.direction,
                fade: 'fade' === $scope.elementSettings.effect,
            };

    $scope.events = function () {
        $carousel.on('beforeChange', function (event, slick, currentSlide, nextSlide) {
            currentSlide = nextSlide;
            $thumbs.removeClass('is--active');
            $thumbs.eq(currentSlide).addClass('is--active');
        });

        $thumbs.each(function (currentSlide) {
            $(this).on('click', function (e) {
                e.preventDefault();
                $carousel.slick('slickGoTo', currentSlide);
            });
        });
    };

    $scope.init = function () {
        $carousel.slick(slickArgs);

        $thumbs.removeClass('is--active');
        $thumbs.eq(0).addClass('is--active');

        $carousel.slick('setPosition');

        $scope.events();

        if (elementorFrontend.isEditMode()) {
            $preview._resize(function () {
                $carousel.slick('setPosition');
            });
        }
    };
    $scope.init();
};

jQuery(window).on("elementor/frontend/init", function () {
    elementorFrontend.hooks.addAction(
            "frontend/element_ready/sa_el_gallery_slider.default",
            SaElGallerySlider
            );
});