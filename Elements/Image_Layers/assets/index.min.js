var SaElWidgetsEditor = {

    activeSection: null,

    currentEditModel: null,

    inc: null,

    init: function() {

        window.elementor.on('preview:loaded', function() {

            elementor.$preview[0].contentWindow.SaElWidgetsEditor = SaElWidgetsEditor;

        });

        elementor.channels.editor.on('section:activated', SaElWidgetsEditor.onSectionActivate);


    },

    onSectionActivate: function(sectionName, elementorEditor) {

        var editModelView = elementorEditor.getOption('editedElementView'),
            editModel = editModelView.model;

        window.SaElWidgetsEditor.currentEditModel = editModelView;

        if ('sa_el_image_layers' === editModel.get('widgetType')) {

            setTimeout(function() {
                editModelView.$el.parent().sortable('disable');
            }, 500);

        } else {
            setTimeout(function() {
                editModelView.$el.parent().sortable('enable');
            }, 500);
        }

    },

    activateEditorPanelTab: function(tab) {

        var $tab = $("div.elementor-control-" + tab);

        if ($tab.length && !$tab.hasClass('elementor-open')) {

            $tab.trigger('click');
        }

    }

};

$(window).on('elementor:init', SaElWidgetsEditor.init);

window.SaElWidgetsEditor = SaElWidgetsEditor;







var SaElImageLayers = function($scope, $) {
    var SaElIamgeLaysElem = $scope.find(".sa-el-img-layers-wrapper"),
        currentDevice = elementorFrontend.getCurrentDeviceMode(),
        layers = $(SaElIamgeLaysElem).find(".sa-el-img-layers-list-item"),
        ua = navigator.userAgent,
        is_ie = ua.indexOf("MSIE ") > -1 || ua.indexOf("Trident/") > -1;

    var applyOn = SaElIamgeLaysElem.data("devices");

    layers
        .each(function(index, layer) {
            var $layer = $(layer),
                data = $layer.data();

            if (data.scrolls && -1 !== applyOn.indexOf(currentDevice)) {

                var instance = null,
                    effects = [],
                    vScrollSettings = {},
                    hScrollSettings = {},
                    oScrollSettings = {},
                    bScrollSettings = {},
                    rScrollSettings = {},
                    scaleSettings = {},
                    grayScaleSettings = {},
                    settings = {};

                if (data.scrolls) {

                    if (data.vscroll) {
                        effects.push('translateY');
                        vScrollSettings = {
                            speed: data.vscrollSpeed,
                            direction: data.vscrollDir,
                            range: {
                                start: data.vscrollStart,
                                end: data.vscrollEnd
                            }
                        };
                    }
                    if (data.hscroll) {
                        effects.push('translateX');
                        hScrollSettings = {
                            speed: data.hscrollSpeed,
                            direction: data.hscrollDir,
                            range: {
                                start: data.hscrollStart,
                                end: data.hscrollEnd
                            }
                        };
                    }
                    if (data.oscroll) {
                        effects.push('opacity');
                        oScrollSettings = {
                            level: data.oscrollLevel,
                            fade: data.oscrollEffect,
                            range: {
                                start: data.oscrollStart,
                                end: data.oscrollEnd
                            }
                        };
                    }
                    if (data.bscroll) {
                        effects.push('blur');
                        bScrollSettings = {
                            level: data.bscrollLevel,
                            blur: data.bscrollEffect,
                            range: {
                                start: data.bscrollStart,
                                end: data.bscrollEnd
                            }
                        };
                    }
                    if (data.rscroll) {
                        effects.push('rotate');
                        rScrollSettings = {
                            speed: data.rscrollSpeed,
                            direction: data.rscrollDir,
                            range: {
                                start: data.rscrollStart,
                                end: data.rscrollEnd
                            }
                        };
                    }
                    if (data.scale) {
                        effects.push('scale');
                        scaleSettings = {
                            speed: data.scaleSpeed,
                            direction: data.scaleDir,
                            range: {
                                start: data.scaleStart,
                                end: data.scaleEnd
                            }
                        };
                    }
                    if (data.gscale) {
                        effects.push('gray');
                        grayScaleSettings = {
                            level: data.gscaleLevel,
                            gray: data.gscaleEffect,
                            range: {
                                start: data.gscaleStart,
                                end: data.gscaleEnd
                            }
                        };
                    }

                }

                settings = {
                    elType: 'Widget',
                    vscroll: vScrollSettings,
                    hscroll: hScrollSettings,
                    oscroll: oScrollSettings,
                    bscroll: bScrollSettings,
                    rscroll: rScrollSettings,
                    scale: scaleSettings,
                    gscale: grayScaleSettings,
                    effects: effects
                };

                instance = new SaElEffects(layer, settings);
                instance.init();

            }

            if (
                $layer.data("layer-animation") &&
                " " != $layer.data("layer-animation")
            ) {

                var waypoint = new Waypoint({
                    element: $(SaElIamgeLaysElem),
                    offset: Waypoint.viewportHeight() - 150,
                    handler: function() {

                        $layer
                            .css("opacity", "1")
                            .addClass("animated " + $layer.data("layer-animation"));
                    }
                });
            }
        });

    SaElIamgeLaysElem.mousemove(function(e) {
        SaElIamgeLaysElem
            .find('.sa-el-img-layers-list-item[data-parallax="true"]')
            .each(function() {
                var $this = $(this),
                    resistance = $(this).data("rate");
                TweenLite.to($this, 0.2, {
                    x: -((e.clientX - window.innerWidth / 2) / resistance),
                    y: -((e.clientY - window.innerHeight / 2) / resistance)
                });
            });
    });


    var tilts = SaElIamgeLaysElem.find('.sa-el-img-layers-list-item[data-tilt="true"]'),
        tilt = UniversalTilt.init({
            elements: tilts,
            callbacks: {
                onMouseLeave: function(el) {
                    el.style.boxShadow = "0 45px 100px rgba(255, 255, 255, 0)";
                },
                onDeviceMove: function(el) {
                    el.style.boxShadow = "0 45px 100px rgba(255, 255, 255, 0.3)";
                }
            }
        });
};
var SaElImageLayersEditorHandler = function($scope, $) {

    var SaElIamgeLaysElem = $scope.find(".sa-el-img-layers-wrapper"),
        settings = {
            repeater: 'sa_el_img_layers_images_repeater',
            item: '.sa-el-img-layers-list-item',
            width: 'sa_el_img_layers_width',
            hor: 'sa_el_img_layers_hor_position',
            ver: 'sa_el_img_layers_ver_position',
            tab: 'sa_el_img_layers_content',
            offset: 0,
            widgets: ["drag", "resize"]
        },
        instance = null;

    instance = new SaElEditorBehavior(SaElIamgeLaysElem, settings);
    instance.init();

};
(function($) {
    "use strict";
    window.SaElEditorBehavior = function($element, settings) {

        var self = this,
            $el = $element,
            elementSettings = settings,
            editModel = null,
            repeater = null;

        var items = $el.find(elementSettings.item),
            tag = $el.prop('tagName');

        self.init = function() {

            editModel = self.getEditModelBycId();

            if (!items.length || undefined === editModel) {
                return;
            }

            repeater = editModel.get(elementSettings.repeater).models;

            if (elementSettings.widgets.includes("resize")) {

                var resizableOptions = self.getResizableOptions();

            }

            var draggableOptions = self.getDraggableOptions();

            if ('SECTION' !== tag) {
                var $widget = window.elementor.getRegion('sections').currentView.$childViewContainer.find('.elementor-widget-wrap');
                $widget.find(elementSettings.item).closest('.elementor-widget-wrap').sortable('disable');
            }


            items.filter(function() {

                if ('absolute' === $(this).css('position')) {

                    $(this).draggable(draggableOptions);

                    if (elementSettings.widgets.includes("resize")) {

                        $(this).resizable(resizableOptions);

                    }

                }

            });

        };

        self.getDraggableOptions = function() {

            var draggableOptions = {};

            draggableOptions.stop = function(e, ui) {

                var index = self.layerToEdit(ui.helper),
                    deviceSuffix = self.getCurrentDeviceSuffix(),
                    hUnit = 'SECTION' === tag ? '%' : repeater[index].get(elementSettings.hor + deviceSuffix).unit,
                    hWidth = window.elementor.helpers.elementSizeToUnit(ui.helper, ui.position.left, hUnit),
                    vUnit = repeater[index].get(elementSettings.ver + deviceSuffix).unit,
                    vWidth = ('%' === vUnit || 'SECTION' === tag) ? self.verticalOffsetToPercent(ui.helper, ui.position.top) : window.elementor.helpers.elementSizeToUnit(ui.helper, ui.position.top, vUnit),
                    settingToChange = {};

                settingToChange[elementSettings.hor + deviceSuffix] = { unit: hUnit, size: hWidth };

                settingToChange[elementSettings.ver + deviceSuffix] = { unit: vUnit, size: vWidth };

                if ('SECTION' !== tag) {
                    $el.trigger('click');
                } else {
                    $el.find('i.eicon-handle').trigger('click');
                }

                window.SaElWidgetsEditor.activateEditorPanelTab(elementSettings.tab);

                repeater[index].setExternalChange(settingToChange);


            };

            return draggableOptions;

        };

        self.getResizableOptions = function() {

            var resizableOptions = {};

            resizableOptions.handles = self.setHandle();
            resizableOptions.stop = function(e, ui) {

                var index = self.layerToEdit(ui.element),
                    deviceSuffix = self.getCurrentDeviceSuffix(),
                    unit = 'SECTION' === tag ? '%' : repeater[index].get(elementSettings.width + deviceSuffix).unit,
                    width = window.elementor.helpers.elementSizeToUnit(ui.element, ui.size.width, unit),
                    settingToChange = {};

                settingToChange[elementSettings.width + deviceSuffix] = { unit: unit, size: width };

                if ('SECTION' !== tag) {
                    $el.trigger('click');
                } else {
                    $el.find('i.eicon-handle').trigger('click');
                }

                window.SaElWidgetsEditor.activateEditorPanelTab(elementSettings.tab);

                repeater[index].setExternalChange(settingToChange);

            };

            return resizableOptions;

        };

        self.getModelcId = function() {

            return $el.closest('.elementor-element').data('model-cid');

        };

        self.getEditModelBycId = function() {

            var cID = self.getModelcId();

            return elementorFrontend.config.elements.data[cID];

        };

        self.getCurrentDeviceSuffix = function() {

            var currentDeviceMode = elementorFrontend.getCurrentDeviceMode();

            return ('desktop' === currentDeviceMode) ? '' : '_' + currentDeviceMode;

        };

        self.layerToEdit = function($layer) {

            var offset = elementSettings.offset;

            if ('SECTION' === tag) {
                var length = $el.find('.sa-el-parallax-layer').length;
                if (length > 1) {
                    return (length - 1) - $el.find($layer).index();
                }
            }

            return ($el.find($layer).index()) - offset;

        };

        self.verticalOffsetToPercent = function($el, size) {

            size = size / ($el.offsetParent().height() / 100);

            return Math.round(size * 1000) / 1000;

        };

        self.setHandle = function() {

            return window.elementor.config.is_rtl ? 'w' : 'e';

        };

    };
}(jQuery));
jQuery(window).on("elementor/frontend/init", function() {
    elementorFrontend.hooks.addAction(
        "frontend/element_ready/sa_el_image_layers.default",
        SaElImageLayers
    );
    if (elementorFrontend.isEditMode()) {

        elementorFrontend.hooks.addAction(
            "frontend/element_ready/sa_el_image_layers.default",
            SaElImageLayersEditorHandler
        );

    }
});
(function($) {
    "use strict";

    window.SaElEffects = function(element, settings) {

        var self = this,
            $el = $(element),
            scrolls = $el.data("scrolls"),
            elementSettings = settings,
            elType = elementSettings.elType;

        self.elementRules = {};

        self.init = function() {

            if (scrolls || 'SECTION' === elType) {

                if (!elementSettings.effects.length) {
                    return;
                }
                self.setDefaults();
                elementorFrontend.elements.$window.on('scroll load', self.initScroll);
            } else {
                elementorFrontend.elements.$window.off('scroll load', self.initScroll);
                return;
            }

        };

        self.setDefaults = function() {

            elementSettings.defaults = {};
            elementSettings.defaults.axis = 'y';

        };

        self.transform = function(action, percents, data) {

            if ('down' === data.direction) {
                percents = 100 - percents;
            }

            if (data.range) {

                if (data.range.start > percents) {
                    percents = data.range.start;
                }

                if (data.range.end < percents) {
                    percents = data.range.end;
                }

            }

            if ('rotate' === action) {
                elementSettings.defaults.unit = 'deg';
            } else {
                elementSettings.defaults.unit = 'px';
            }

            self.updateElement('transform', action, self.getStep(percents, data) + elementSettings.defaults.unit);

        };

        self.getPercents = function() {

            var dimensions = self.getDimensions();

            var elementTopWindowPoint = dimensions.elementTop - pageYOffset;
            var elementEntrancePoint = elementTopWindowPoint - innerHeight;

            var passedRangePercents = 100 / dimensions.range * (elementEntrancePoint * -1);

            return passedRangePercents;

        };

        self.initScroll = function() {

            if (elementSettings.effects.includes('translateY')) {

                self.initVScroll();

            }

            if (elementSettings.effects.includes('translateX')) {

                self.initHScroll();

            }

            if (elementSettings.effects.includes('opacity')) {

                self.initOScroll();

            }

            if (elementSettings.effects.includes('blur')) {

                self.initBScroll();

            }

            if (elementSettings.effects.includes('gray')) {

                self.initGScroll();

            }

            if (elementSettings.effects.includes('rotate')) {

                self.initRScroll();

            }

            if (elementSettings.effects.includes('scale')) {

                self.initScaleScroll();

            }

        };

        self.initVScroll = function() {

            var percents = self.getPercents();

            self.transform('translateY', percents, elementSettings.vscroll);

        };

        self.initHScroll = function() {

            var percents = self.getPercents();

            self.transform('translateX', percents, elementSettings.hscroll);

        };

        self.getDimensions = function() {

            var elementOffset = $el.offset();

            var dimensions = {
                elementHeight: $el.outerHeight(),
                elementWidth: $el.outerWidth(),
                elementTop: elementOffset.top,
                elementLeft: elementOffset.left
            };

            dimensions.range = dimensions.elementHeight + innerHeight;

            return dimensions;

        };

        self.getStep = function(percents, options) {

            return -(percents - 50) * options.speed;

        };

        self.initOScroll = function() {

            var percents = self.getPercents(),
                data = elementSettings.oscroll,
                movePoint = self.getEffectMovePoint(percents, data.fade, data.range),
                level = data.level / 10,
                opacity = 1 - level + self.getEffectValueFromMovePoint(level, movePoint);

            $el.css('opacity', opacity);

        };

        self.initBScroll = function() {

            var percents = self.getPercents(),
                data = elementSettings.bscroll,
                movePoint = self.getEffectMovePoint(percents, data.blur, data.range),
                blur = data.level - self.getEffectValueFromMovePoint(data.level, movePoint);

            self.updateElement('filter', 'blur', blur + 'px');

        };

        self.initGScroll = function() {

            var percents = self.getPercents(),
                data = elementSettings.gscale,
                movePoint = self.getEffectMovePoint(percents, data.gray, data.range),
                grayScale = 10 * (data.level - self.getEffectValueFromMovePoint(data.level, movePoint));

            self.updateElement('filter', 'grayscale', grayScale + '%');

        };

        self.initRScroll = function() {

            var percents = self.getPercents();

            self.transform('rotate', percents, elementSettings.rscroll);

        };

        self.getEffectMovePoint = function(percents, effect, range) {

            var point = 0;

            if (percents < range.start) {
                if ('down' === effect) {
                    point = 0;
                } else {
                    point = 100;
                }
            } else if (percents < range.end) {

                point = self.getPointFromPercents((range.end - range.start), (percents - range.start));

                if ('up' === effect) {
                    point = 100 - point;
                }

            } else if ('up' === effect) {
                point = 0;
            } else if ('down' === effect) {
                point = 100;
            }

            return point;

        };

        self.initScaleScroll = function() {

            var percents = self.getPercents(),
                data = elementSettings.scale,
                movePoint = self.getEffectMovePoint(percents, data.direction, data.range);

            this.updateElement('transform', 'scale', 1 + data.speed * movePoint / 1000);

        };

        self.getEffectValueFromMovePoint = function(level, movePoint) {

            return level * movePoint / 100;

        };

        self.getPointFromPercents = function(movableRange, percents) {

            var movePoint = percents / movableRange * 100;

            return +movePoint.toFixed(2);

        };

        self.updateElement = function(propName, key, value) {

            if (!self.elementRules[propName]) {
                self.elementRules[propName] = {};
            }

            if (!self.elementRules[propName][key]) {
                self.elementRules[propName][key] = true;

                self.updateElementRule(propName);
            }

            var cssVarKey = '--' + key;

            element.style.setProperty(cssVarKey, value);

        };

        self.updateElementRule = function(rule) {

            var cssValue = '';

            $.each(self.elementRules[rule], function(variableKey) {
                cssValue += variableKey + '(var(--' + variableKey + '))';
            });

            $el.css(rule, cssValue);

        };

    };
}(jQuery));