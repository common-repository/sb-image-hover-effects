var SAChartHandler = function ($scope, $) {

    var SAChart = $scope.find(".sa-el-chart-container"),
            SAChartSettings = SAChart.data("settings"),
            type = SAChartSettings["type"],
            eventsArray = [
                "mousemove",
                "mouseout",
                "click",
                "touchstart",
                "touchmove"
            ],
            printVal = SAChartSettings["printVal"],
            event =
            ("pie" == type || "doughnut" == type) && printVal ? false : eventsArray,
            SAChartData = SAChart.data("chart"),
            data = {
                labels: SAChartSettings["xlabels"],
                datasets: []
            };

    function renderChart() {
        var ctx = document
                .getElementById(SAChartSettings["chartId"])
                .getContext("2d");


        var globalOptions = {
            maintainAspectRatio: false,
            layout: {
                padding: {
                    top: type == "polarArea" ? 6 : 0
                }
            },
            events: event,
            animation: {
                duration: 500,
                easing: SAChartSettings["easing"],
                onComplete: function () {
                    if (!event) {
                        this.defaultFontSize = 16;
                        ctx.font =
                                '15px "Helvetica Neue", "Helvetica", "Arial", sans-serif';

                        ctx.textAlign = "center";
                        ctx.textBaseline = "bottom";

                        this.data.datasets.forEach(function (dataset) {
                            for (var i = 0; i < dataset.data.length; i++) {
                                var model =
                                        dataset._meta[Object.keys(dataset._meta)[0]].data[i]
                                        ._model,
                                        total =
                                        dataset._meta[Object.keys(dataset._meta)[0]].total,
                                        mid_radius =
                                        model.innerRadius +
                                        (model.outerRadius - model.innerRadius) / 2,
                                        start_angle = model.startAngle,
                                        end_angle = model.endAngle,
                                        mid_angle = start_angle + (end_angle - start_angle) / 2;

                                var x = mid_radius * Math.cos(mid_angle);
                                var y = mid_radius * Math.sin(mid_angle);

                                ctx.fillStyle = SAChartSettings["yTicksCol"];

                                var percent =
                                        String(Math.round((dataset.data[i] / total) * 100)) + "%";

                                ctx.fillText(percent, model.x + x, model.y + y + 15);
                            }
                        });
                    }
                }
            },
            tooltips: {
                enabled: SAChartSettings["enTooltips"],
                mode: SAChartSettings["modTooltips"],
                callbacks: {
                    label: function (tooltipItem, data) {
                        var prefixString = "";
                        if (
                                "pie" == type ||
                                "doughnut" == type ||
                                "polarArea" == type
                                ) {
                            prefixString = data.labels[tooltipItem.index] + ": ";
                        }
                        var dataset = data.datasets[tooltipItem.datasetIndex];
                        var total = dataset.data.reduce(function (
                                previousValue,
                                currentValue
                                ) {
                            return parseFloat(previousValue) + parseFloat(currentValue);
                        });
                        var currentValue = dataset.data[tooltipItem.index];
                        var percentage = ((currentValue / total) * 100).toPrecision(3);
                        return (
                                prefixString +
                                (SAChartSettings["percentage"]
                                        ? percentage + "%"
                                        : currentValue)
                                );
                    }
                }
            },
            legend: {
                display: SAChartSettings["legDis"],
                position: SAChartSettings["legPos"],
                reverse: SAChartSettings["legRev"],
                onClick: null,
                labels: {
                    boxWidth: parseInt(SAChartSettings["itemWid"]),
                    fontColor: SAChartSettings["legCol"],
                    fontSize: parseInt(SAChartSettings["legSize"])
                }
            }

        };

        var multiScaleOptions = {
            scales: {
                xAxes: [
                    {
                        barPercentage: SAChartSettings["xwidth"],
                        display:
                                type == "radar" ||
                                type == "pie" ||
                                type == "polarArea" ||
                                type == "doughnut"
                                ? false
                                : true,
                        gridLines: {
                            display: SAChartSettings["xGrid"],
                            color: SAChartSettings["xGridCol"],
                            lineWidth: SAChartSettings["xGridWidth"],
                            drawBorder: true
                        },
                        scaleLabel: {
                            display: SAChartSettings["xlabeldis"],
                            labelString: SAChartSettings["xlabel"],
                            fontColor: SAChartSettings["xlabelcol"],
                            fontSize: SAChartSettings["xlabelsize"]
                        },
                        ticks: {
                            fontSize: SAChartSettings["xTicksSize"],
                            fontColor: SAChartSettings["xTicksCol"],
                            stepSize: SAChartSettings["stepSize"],
                            maxRotation: SAChartSettings["xTicksRot"],
                            minRotation: SAChartSettings["xTicksRot"],
                            beginAtZero: SAChartSettings["xTicksBeg"],
                            callback: function (tick) {
                                return tick.toLocaleString();
                            }
                        }
                    }
                ],
                yAxes: [
                    {
                        display:
                                type == "radar" ||
                                type == "pie" ||
                                type == "polarArea" ||
                                type == "doughnut"
                                ? false
                                : true,
                        type: SAChartSettings["yAxis"],
                        gridLines: {
                            display: SAChartSettings["yGrid"],
                            color: SAChartSettings["yGridCol"],
                            lineWidth: SAChartSettings["yGridWidth"],
                        },
                        scaleLabel: {
                            display: SAChartSettings["ylabeldis"],
                            labelString: SAChartSettings["ylabel"],
                            fontColor: SAChartSettings["ylabelcol"],
                            fontSize: SAChartSettings["ylabelsize"]
                        },
                        ticks: {
                            suggestedMin: SAChartSettings["suggestedMin"],
                            suggestedMax: SAChartSettings["suggestedMax"],
                            fontSize: SAChartSettings["yTicksSize"],
                            fontColor: SAChartSettings["yTicksCol"],
                            beginAtZero: SAChartSettings["yTicksBeg"],
                            stepSize: SAChartSettings["stepSize"],
                            callback: function (tick) {
                                return tick.toLocaleString();
                            }
                        }
                    }
                ]
            }
        };

        var singleScaleOptions = {
            scale: {
                ticks: {
                    beginAtZero: SAChartSettings["yTicksBeg"],
                    stepSize: SAChartSettings["stepSize"],
                    suggestedMax: SAChartSettings["suggestedMax"]
                }
            }
        };

        var myChart = new Chart(ctx, {
            type: type,
            data: data,
            options: Object.assign(globalOptions, ("radar" !== type && "polarArea" !== type) ? multiScaleOptions : singleScaleOptions)
        });


        SAChartData.forEach(function (element) {
            if (type !== "pie" && type !== "doughnut") {
                var gradient = ctx.createLinearGradient(0, 0, 0, 600),
                        secondColor = element.backgroundColor[1]
                        ? element.backgroundColor[1]
                        : element.backgroundColor[0];
                gradient.addColorStop(0, element.backgroundColor[0]);
                gradient.addColorStop(1, secondColor);
                element.backgroundColor = gradient;
                element.hoverBackgroundColor = gradient;
            }
            data.datasets.push(element);
            myChart.update();
        });

        $("#" + SAChartSettings["chartId"]).on("click", function (evt) {
            var activePoint = myChart.getElementAtEvent(evt);
            if (activePoint[0]) {
                var URL =
                        myChart.data.datasets[activePoint[0]._datasetIndex].links[
                        activePoint[0]._index
                ];
                if (URL != null && URL != "") {
                    window.open(URL, SAChartSettings["target"]);
                }
            }
        });
    }
    var $checkModal = $(SAChart).closest(".sa-el-modal-box-modal");

    if ($checkModal.length) {
        renderChart();
    }
    var waypoint = new Waypoint({
        element: $("#" + SAChartSettings["chartId"]),
        offset: Waypoint.viewportHeight() - 250,
        triggerOnce: true,
        handler: function () {
            renderChart();
            this.destroy();
        }
    });
};
jQuery(window).on("elementor/frontend/init", function () {
    elementorFrontend.hooks.addAction(
            "frontend/element_ready/sa-el-chart.default",
            SAChartHandler
            );
});